#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STUDENTS 100 // 最大学生数量
#define MAX_NAME_LEN 20 // 学生姓名的最大长度
#define MAX_ID_LEN 10 // 学生学号的最大长度

// 定义学生结构体
struct Student {
    char id[MAX_ID_LEN]; // 学生学号
    char name[MAX_NAME_LEN]; // 学生姓名
    int age; // 学生年龄
    float score; // 学生成绩
};

// 全局变量，存储学生数据
struct Student students[MAX_STUDENTS];
int num_students = 0; // 当前学生数量

// 显示主菜单
void show_menu() {
    printf("\n*** 学生管理系统 ***\n");
    printf("1. 输入记录\n");
    printf("2. 显示记录\n");
    printf("3. 删除记录\n");
    printf("4. 修改记录\n");
    printf("5. 插入记录\n");
    printf("6. 搜索记录\n");
    printf("7. 统计记录\n");
    printf("8. 排序记录\n");
    printf("9. 保存记录\n");
    printf("0. 退出系统\n");
}

// 清空输入缓存区
void clear_input() {
    while (getchar() != '\n') {}
}

// 输入一个学生的数据
void input_student(struct Student *student) {
    printf("请输入学生学号：");
    scanf("%s", student->id);
    clear_input();

    printf("请输入学生姓名：");
    fgets(student->name, MAX_NAME_LEN, stdin);
    student->name[strlen(student->name) - 1] = '\0'; // 去掉末尾的换行符

    printf("请输入学生年龄：");
    scanf("%d", &student->age);
    clear_input();

    printf("请输入学生成绩：");
    scanf("%f", &student->score);
    clear_input();
}

// 显示所有学生的数据
void show_students() {
    if (num_students == 0) {
        printf("暂无记录！\n");
        return;
    }

    printf("学号\t姓名\t年龄\t成绩\n");
    for (int i = 0; i < num_students; i++) {
        printf("%s\t%s\t%d\t%.2f\n", students[i].id, students[i].name, students[i].age, students[i].score);
    }
}

// 根据学号查找学生在数组中的位置，找不到返回-1
int find_student(char *id) {
    for (int i = 0; i < num_students; i++) {
        if (strcmp(students[i].id, id) == 0) {
            return i;
        }
    }
    return -1;
}

// 删除一条学生数据
void delete_student() {
    char id[MAX_ID_LEN];
    printf("请输入要删除的学生学号：");
scanf("%s", id);
clear_input();
int pos = find_student(id);
if (pos == -1) {
    printf("找不到该学生记录！\n");
    return;
}

// 把最后一条记录复制到当前位置，然后数量减1，相当于删除了这条记录
students[pos] = students[num_students - 1];
num_students--;

printf("删除成功！\n");
}

// 修改一条学生数据
void modify_student() {
char id[MAX_ID_LEN];
printf("请输入要修改的学生学号：");
scanf("%s", id);
clear_input();
int pos = find_student(id);
if (pos == -1) {
    printf("找不到该学生记录！\n");
    return;
}

printf("请输入修改后的学生姓名：");
fgets(students[pos].name, MAX_NAME_LEN, stdin);
students[pos].name[strlen(students[pos].name) - 1] = '\0'; // 去掉末尾的换行符

printf("请输入修改后的学生年龄：");
scanf("%d", &students[pos].age);
clear_input();

printf("请输入修改后的学生成绩：");
scanf("%f", &students[pos].score);
clear_input();

printf("修改成功！\n");
}

// 插入一条学生数据
void insert_student() {
if (num_students >= MAX_STUDENTS) {
printf("学生数量已达到最大值，无法添加！\n");
return;
}
struct Student student;
input_student(&student);

students[num_students] = student;
num_students++;

printf("添加成功！\n");
}

// 按照学号搜索学生数据
void search_student() {
char id[MAX_ID_LEN];
printf("请输入要搜索的学生学号：");
scanf("%s", id);
clear_input();
int pos = find_student(id);
if (pos == -1) {
    printf("找不到该学生记录！\n");
    return;
}

printf("学号\t姓名\t年龄\t成绩\n");
printf("%s\t%s\t%d\t%.2f\n", students[pos].id, students[pos].name, students[pos].age, students[pos].score);
}

// 统计学生数据
void count_students() {
printf("当前学生数量：%d\n", num_students);
}
// 按照学号排序学生数据
void sort_students() {
for (int i = 0; i < num_students - 1; i++) {
for (int j = 0; j < num_students - i - 1; j++) {
if (strcmp(students[j].id, students[j + 1].id) > 0) {
struct Student temp = students[j];
students[j] = students[j + 1];
students[j + 1] = temp;
}
}
}
printf("排序成功！\n");
}

// 保存学生数据到文件中
void save_students() {
FILE *fp = fopen("students.txt", "w");
if (fp == NULL) {
printf("文件打开失败！\n");
return;
}
for (int i = 0; i < num_students; i++) {
    fprintf(fp,"%s %s %d %.2f\n", students[i].id, students[i].name, students[i].age, students[i].score);
}
fclose(fp);

printf("保存成功！\n");
}

// 从文件中读取学生数据
void load_students() {
FILE *fp = fopen("students.txt", "r");
if (fp == NULL) {
printf("文件打开失败！\n");
return;
}
num_students = 0;
while (fscanf(fp, "%s %s %d %f", students[num_students].id, students[num_students].name, &students[num_students].age, &students[num_students].score) == 4) {
    num_students++;
}

fclose(fp);

printf("加载成功！\n");
}

// 主函数
int main() {
int choice;
load_students();

while (1) {
    print_menu();
    printf("请输入您的选择：");
    scanf("%d", &choice);
    clear_input();

    switch (choice) {
        case 1:
            input_student(&students[num_students]);
            num_students++;
            printf("添加成功！\n");
            break;
        case 2:
            list_students();
            break;
        case 3:
            delete_student();
            break;
        case 4:
            modify_student();
            break;
        case 5:
            insert_student();
            break;
        case 6:
            search_student();
            break;
        case 7:
            count_students();
            break;
        case 8:
            sort_students();
            break;
        case 9:
            save_students();
            break;
        case 0:
            printf("感谢使用学生管理系统，再见！\n");
            return 0;
        default:
            printf("无效的选择，请重新输入！\n");
            break;
    }
}

return 0;
}